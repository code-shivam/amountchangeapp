{
  "version": 3,
  "sources": ["../format-number/index.js", "dep:format-number"],
  "sourcesContent": ["\nmodule.exports = formatter;\nmodule.exports.default = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n", "export default require(\"./node_modules/format-number/index.js\");"],
  "mappings": "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",
  "names": []
}
